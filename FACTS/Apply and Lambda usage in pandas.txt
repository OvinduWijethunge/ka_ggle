

use apply and lambda anytime I get stuck while building a complex logic for a new column or filter.
when we want to create new column by doing some operation we can use lmbda 

eg...........
---------------------------for a one column------------------------------------------------------------------------------
import pandas as pd 
   
# creating and initializing a list 
values= [['Rohan',455],['Elvish',250],['Deepak',495], 
         ['Soni',400],['Radhika',350],['Vansh',450]]  
  
# creating a pandas dataframe 
df = pd.DataFrame(values,columns=['Name','Total_Marks']) 
  
# Applying lambda function to find  
# percentage of 'Total_Marks' column  
# using df.assign() 
df = df.assign(Percentage = lambda x: (x['Total_Marks'] /500 * 100)) 
  
# displaying the data frame 
df 

-----------------------------------------------------------------------for a multiple coulmns--------------------------------------------------

import pandas as pd 
  
# creating and initializing a nested list 
values_list = [[15, 2.5, 100], [20, 4.5, 50], [25, 5.2, 80], 
               [45, 5.8, 48], [40, 6.3, 70], [41, 6.4, 90], 
               [51, 2.3, 111]] 
  
# creating a pandas dataframe 
df = pd.DataFrame(values_list, columns=['Field_1', 'Field_2', 'Field_3']) 
  
# Applying lambda function to find  
# the product of 3 columns using  
# df.assign() 
df = df.assign(Product=lambda x: (x['Field_1'] * x['Field_2'] * x['Field_3'])) 
  
# printing dataframe 
df 


------------------------------for a single row------------------------------------------------------------------------------------

import pandas as pd 
import numpy as np 
  
# creating and initializing a nested list 
values_list = [[15, 2.5, 100], [20, 4.5, 50], [25, 5.2, 80], 
               [45, 5.8, 48], [40, 6.3, 70], [41, 6.4, 90],  
               [51, 2.3, 111]] 
  
# creating a pandas dataframe 
df = pd.DataFrame(values_list, columns=['Field_1', 'Field_2', 'Field_3'], 
                  index=['a', 'b', 'c', 'd', 'e', 'f', 'g']) 
  
  
# Apply function numpy.square() to square 
# the values of one row only i.e. row  
# with index name 'd' 
df = df.apply(lambda x: np.square(x) if x.name == 'd' else x, axis=1) 
  
  
# printing dataframe 
df






------------------------------------------for a multiple rows (DF)-----------------------------

# importing pandas and numpylibraries 
import pandas as pd 
import numpy as np 
  
# creating and initializing a nested list 
values_list = [[15, 2.5, 100], [20, 4.5, 50], [25, 5.2, 80], 
               [45, 5.8, 48], [40, 6.3, 70], [41, 6.4, 90], 
               [51, 2.3, 111]] 
  
# creating a pandas dataframe 
df = pd.DataFrame(values_list, columns=['Field_1', 'Field_2', 'Field_3'], 
                  index=['a', 'b', 'c', 'd', 'e', 'f', 'g']) 
  
  
# Apply function numpy.square() to square  
# the values of 3 rows only i.e. with row 
# index name 'a', 'e' and 'g' only 
df = df.apply(lambda x: np.square(x) if x.name in [ 
              'a', 'e', 'g'] else x, axis=1) 
  
# printing dataframe 
df